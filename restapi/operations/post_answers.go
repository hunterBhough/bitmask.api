// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostAnswersHandlerFunc turns a function with the right signature into a post answers handler
type PostAnswersHandlerFunc func(PostAnswersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAnswersHandlerFunc) Handle(params PostAnswersParams) middleware.Responder {
	return fn(params)
}

// PostAnswersHandler interface for that can handle valid post answers params
type PostAnswersHandler interface {
	Handle(PostAnswersParams) middleware.Responder
}

// NewPostAnswers creates a new http.Handler for the post answers operation
func NewPostAnswers(ctx *middleware.Context, handler PostAnswersHandler) *PostAnswers {
	return &PostAnswers{Context: ctx, Handler: handler}
}

/*PostAnswers swagger:route POST / postAnswers

endpoint to receive answers from the frontend; encrypt and send to blockchain; cache in db

*/
type PostAnswers struct {
	Context *middleware.Context
	Handler PostAnswersHandler
}

func (o *PostAnswers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostAnswersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
