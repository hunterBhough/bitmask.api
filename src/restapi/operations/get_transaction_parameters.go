// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTransactionParams creates a new GetTransactionParams object
// with the default values initialized.
func NewGetTransactionParams() GetTransactionParams {
	var ()
	return GetTransactionParams{}
}

// GetTransactionParams contains all the bound params for the get transaction operation
// typically these are obtained from a http.Request
//
// swagger:parameters getTransaction
type GetTransactionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*the password to the wallet
	  In: query
	*/
	PrivateKey *string
	/*Id of the transaction
	  In: query
	*/
	TransactionID *string
	/*Wallet Id
	  In: query
	*/
	WalletID *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetTransactionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qPrivateKey, qhkPrivateKey, _ := qs.GetOK("privateKey")
	if err := o.bindPrivateKey(qPrivateKey, qhkPrivateKey, route.Formats); err != nil {
		res = append(res, err)
	}

	qTransactionID, qhkTransactionID, _ := qs.GetOK("transactionId")
	if err := o.bindTransactionID(qTransactionID, qhkTransactionID, route.Formats); err != nil {
		res = append(res, err)
	}

	qWalletID, qhkWalletID, _ := qs.GetOK("walletId")
	if err := o.bindWalletID(qWalletID, qhkWalletID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionParams) bindPrivateKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PrivateKey = &raw

	return nil
}

func (o *GetTransactionParams) bindTransactionID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.TransactionID = &raw

	return nil
}

func (o *GetTransactionParams) bindWalletID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.WalletID = &raw

	return nil
}
