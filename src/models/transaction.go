// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Transaction transaction
// swagger:model Transaction
type Transaction struct {

	// address
	// Required: true
	Address *string `json:"address"`

	// bitmask
	// Required: true
	Bitmask *float64 `json:"bitmask"`

	// cost
	// Required: true
	Cost *float64 `json:"cost"`

	// date created
	DateCreated string `json:"dateCreated,omitempty"`

	// fee
	Fee float64 `json:"fee,omitempty"`

	// short Id
	ShortID int64 `json:"shortId,omitempty"`

	// transaction Id
	// Required: true
	TransactionID *string `json:"transactionId"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBitmask(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCost(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateBitmask(formats strfmt.Registry) error {

	if err := validate.Required("bitmask", "body", m.Bitmask); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateCost(formats strfmt.Registry) error {

	if err := validate.Required("cost", "body", m.Cost); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transactionId", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
