// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Wallet wallet
// swagger:model Wallet
type Wallet struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// private key
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// transactions
	// Required: true
	Transactions WalletTransactions `json:"transactions"`
}

// Validate validates this wallet
func (m *Wallet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wallet) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Wallet) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *Wallet) validateTransactions(formats strfmt.Registry) error {

	if err := validate.Required("transactions", "body", m.Transactions); err != nil {
		return err
	}

	if err := m.Transactions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transactions")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Wallet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Wallet) UnmarshalBinary(b []byte) error {
	var res Wallet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
